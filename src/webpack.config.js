

const webpack = require('webpack');
const path = require('path');
const glob = require('glob');
var fs = require('fs');

const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const ReplaceInFileWebpackPlugin = require("./js/helpers/ReplaceInFileWebpackPluginCustom.js");
const RemoveEmptyScriptsPlugin = require('webpack-remove-empty-scripts');
const CopyPlugin = require("copy-webpack-plugin");


// needed to enable mediaQueries variables in comp scss
// read '_variables.css'
const str = fs.readFileSync(__dirname + '/css/defs/_variables.css').toString();
var mediaQueriesArray = [];

// regex to match all media queries variables
var regex = /(?<=@custom-media ).+?(?=;)/g;
var result = str.match(regex);

// build search/replace array to use with 'ReplaceInFileWebpackPlugin'
result.forEach(element => {
    let search = [element.split(/ (.*)/s)[0]];
    search = new RegExp(search, 'g');
    let replace = element.split(/ (.*)/s)[1];
    replace = replace.replace(/\(/g, '').replace(/\)/g, '')

    mediaQueriesArray.push({
        search: search,
        replace: replace
    })
});

// patternToEntries - function to get all files from folder
const patternToEntries = (pattern, suffix = '') => glob
    .sync(pattern)
    .reduce((acc, val) => ({
        ...acc,
        [path.basename(val, path.extname(val)) + suffix]: val,
    }), {});


// module exports
module.exports = {
    // entries
    entry: {
        bundle: {
            import: './js/theme.js',
            filename: '../assets/[name].js'
        },
        ...patternToEntries('./components/**/*.css', ''),
        ...patternToEntries('./components/**/*.js', ''),
        ...patternToEntries('./components/**/*.ts', ''),
    },
    // output
    output: {
        path: path.resolve(__dirname, './snippets'),
        publicPath: '/',
        filename: '[name].js.liquid',
    },
    // module
    module: {
        rules: [
            // typescript
            {
                test: /\.tsx?$/,
                loader: 'babel-loader',
            },
            // javascript
            {
                test: /\.(js)$/,
                exclude: /node_modules/,
                use: ['babel-loader'],
            },
            // css
            {
                test: /\.(css)$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    {
                        loader: 'css-loader',
                        options: {
                            url: false,
                        },
                    },
                    'postcss-loader',
                ],
            },
            // sass/scss
            {
                test: /\.(s(a|c)ss)$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    "css-loader",
                    {
                        loader: "sass-loader",
                        options: {
                            implementation: require("sass"),
                            sourceMap: true,
                            sassOptions: {
                                outputStyle: "compressed",
                            },
                        },
                    },
                ],
            },
        ],
    },
    plugins: [
        // remove empty js files
        new RemoveEmptyScriptsPlugin(),
        // extract css from js files to separate files
        new MiniCssExtractPlugin({
            filename: '../snippets/[name].css.liquid',
        }),
        // replace media queries variables in css files and liquid variables in js&css files
        new ReplaceInFileWebpackPlugin([
            {
                dir: 'snippets',
                test: [/\.css.liquid$/],
                rules: [
                    // for liquid variables in js&css files
                    {
                        search: /['"]{{/g,
                        replace: '{{',
                    },
                    {
                        search: /}}['"]/g,
                        replace: '}}',
                    },
                    // for media queries variables in css files
                    ...mediaQueriesArray
                ],
            },
        ]),
        // add banner to js files and css files
        new webpack.BannerPlugin('\n\n\tThis file is auto generated by webpack.\n\tDo not edit this file directly.\n\n'),
        // copy liquid files to sections folder, appends json scheme content, and script and style tags
        new CopyPlugin({
            patterns: [
                {
                    noErrorOnMissing: true,
                    from: "components/**/*.liquid",
                    to: "../sections/[name].liquid",
                    transform(content, url) {

                        // get file name without extension
                        let fileName;
                        if (path.win32 === path) {
                            fileName = url.split('\\').pop().split('.').shift();
                        } else if (path.posix === path) {
                            fileName = url.split('/').pop().split('.').shift();
                        }

                        let warning = '\n\n<!--\n\n\tThis file is auto generated by webpack.\n\tDo not edit this file directly.\n\n\-->\n\n';

                        // script tag
                        let tsTag = '\n\n<script>{% render "' + fileName + '.js" %}</script>\n';

                        // style tag
                        let scssTag = '\n{% style %}{% render "' + fileName + '.css" %}{% endstyle %}\n';

                        // get the path name of the json file
                        let jsonPath = url.replace('.liquid', '.json');

                        // get the json file content and wrap it with {% schema %} tags
                        let jsonContent = '\n{% schema %}' + fs.readFileSync(jsonPath, 'utf8') + '\n{% endschema %}';

                        // return the content of the liquid file with the ts & scss & json scheme content
                        return warning + content + tsTag + scssTag + jsonContent;

                    },
                }
            ],
        }),
    ],
    // resolve
    resolve: {
        // extensions
        extensions: ['.scss', '.css', '.js', '.ts', '.liquid'],
    },
    optimization: {
        minimize: false
    }
};
